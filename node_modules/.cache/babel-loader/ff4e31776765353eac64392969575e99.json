{"ast":null,"code":"var _jsxFileName = \"/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useWeb3 } from \"@3rdweb/hooks\"; //import thirdweb\n\nimport { ThirdwebSDK, TokenModule } from \"@3rdweb/sdk\"; //import thirdweb sdk\n\nimport { ethers } from \"ethers\"; //import ethers to interact with the blockchain\n\nimport Home from \"./components/Home.jsx\"; // import Home component\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We instantiate the SDK on Rinkeyby\n\nconst bundleDropModule = sdk.getBundleDropModule(\"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\"); // We can grab a reference to our ERC-1155 contract.\n\nconst tokenModule = sdk.getTokenModule(\"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\"); // We can grab a reference to our ERC-20 token contract.\n\nconst voteModule = sdk.getVoteModule(\"0xe1c1e8bc1B20AeAf8702C6f87D77422bed61C27f\"); // We can grab a reference to our voting contract.\n\nconst App = () => {\n  _s();\n\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋 Address:\", address);\n  const signer = provider ? provider.getSigner() : undefined; // The signer is required to sign transactions on the blockchain. Without it we can only read data, not write.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // hasClaimed lets us easily track whether or not a member has already claimed NFT membership\n\n  const [isClaiming, setIsClaiming] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // Holds the amount of token each member has in state.\n\n  const [memberAddresses, setMemberAddresses] = useState([]); // The array holding all of our members addresses.\n\n  const [proposals, setProposals] = useState([]); // The array holding all the proposals\n\n  const [isVoting, setIsVoting] = useState(false); // isVoting lets us easily keep a voting state while the voting is carried out\n\n  const [hasVoted, setHasVoted] = useState(false); // hasVoted lets us easily track whether or not a member has already voted\n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // A fancy function to shorten someones wallet address\n  // useEffect #1: Grabs all our the addresses of our members holding our NFT. Is executed whenever the \"hasClaimedNFT\" value changes\n\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n\n\n    bundleDropModule.getAllClaimerAddresses(\"0\").then(addresess => {\n      console.log(\"🚀 Members addresses\", addresess);\n      setMemberAddresses(addresess);\n    }).catch(err => {\n      console.error(\"failed to get member list\", err);\n    });\n  }, [hasClaimedNFT]); // useEffect #2: Grabs the # of token each member holds. Is executed whenever the \"hasClaimedNFT\" value changes\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances.\n\n\n    tokenModule.getAllHolderBalances().then(amounts => {\n      console.log(\"👜 Amounts\", amounts);\n      setMemberTokenAmounts(amounts);\n    }).catch(err => {\n      console.error(\"failed to get token amounts\", err);\n    });\n  }, [hasClaimedNFT]); // useMemo: Now, we combine the memberAddresses and memberTokenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]); // useEffect #3: Ensures  our signer can interact with our deployed contract. Is executed whenever the \"signer\" value changes\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]); // useEffect #4 Checks if the user has membership NFT. Is executed whenever the \"address\" value changes\n\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.error(\"failed to nft balance\", error);\n    });\n  }, [address]); // useEffect #5: Retreives all our existing proposals from the contract. Is executed whenever the \"hasClaimedNFT\" value flips\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to voteModule.getAll() to grab the proposals.\n\n\n    voteModule.getAll().then(proposals => {\n      // Set state!\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    }).catch(err => {\n      console.error(\"failed to get proposals\", err);\n    });\n  }, [hasClaimedNFT]); // useEffect #6: Checks if the user already voted. Is executed whenever the \"hasClaimedNFT\", \"proposals\" or \"address\" values change\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retreieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n\n\n    if (!proposals.length) {\n      return;\n    } // Check if the user has already voted on the first proposal.\n\n\n    voteModule.hasVoted(proposals[0].proposalId, address).then(hasVoted => {\n      setHasVoted(hasVoted);\n      console.log(\"🥵 User has already voted\");\n    }).catch(err => {\n      console.error(\"failed to check if wallet has voted\", err);\n    });\n  }, [hasClaimedNFT, proposals, address]); // After al the use effects taking care of function executions due to state changes, we finally decide what to render. \n  // If it's unsupported chain, inform the user\n\n  if (error && error.name === \"UnsupportedChainIdError\") {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"unsupported-network\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Please connect to Rinkeby\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"This dapp only works on the Rinkeby network, please switch networks in your connected wallet.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this);\n  } // If there's no address, show the \"connect\" wallet Home page\n\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(Home, {\n      clickHandler: () => connectWallet(\"injected\")\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 12\n    }, this);\n  } // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n\n\n  if (hasClaimedNFT) {} // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6ADAO Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => {\n        setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n\n        bundleDropModule.claim(\"0\", 1).catch(err => {\n          console.error(\"failed to claim\", err);\n          setIsClaiming(false);\n        }).finally(() => {\n          // Stop loading state.\n          setIsClaiming(false); // Set claim state.\n\n          setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n          console.log(`Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n        });\n      },\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"0MS2sbae89L86+6ye6nLu7V1vaI=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx"],"names":["useEffect","useMemo","useState","useWeb3","ThirdwebSDK","TokenModule","ethers","Home","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","shortenAddress","str","substring","length","getAllClaimerAddresses","then","addresess","catch","err","getAllHolderBalances","amounts","memberList","map","tokenAmount","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","getAll","proposalId","name","claim","finally"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\n\n\nimport { useWeb3 } from \"@3rdweb/hooks\"; //import thirdweb\nimport { ThirdwebSDK, TokenModule } from \"@3rdweb/sdk\"; //import thirdweb sdk\nimport { ethers } from \"ethers\"; //import ethers to interact with the blockchain\nimport Home from \"./components/Home.jsx\"; // import Home component\n\n\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We instantiate the SDK on Rinkeyby\nconst bundleDropModule = sdk.getBundleDropModule(\"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\");  // We can grab a reference to our ERC-1155 contract.\nconst tokenModule = sdk.getTokenModule(\"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\"); // We can grab a reference to our ERC-20 token contract.\nconst voteModule = sdk.getVoteModule(\"0xe1c1e8bc1B20AeAf8702C6f87D77422bed61C27f\"); // We can grab a reference to our voting contract.\n\nconst App = () => {\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋 Address:\", address);\n  const signer = provider ? provider.getSigner() : undefined; // The signer is required to sign transactions on the blockchain. Without it we can only read data, not write.\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // hasClaimed lets us easily track whether or not a member has already claimed NFT membership\n  const [isClaiming, setIsClaiming] = useState(false);   // isClaiming lets us easily keep a loading state while the NFT is minting.\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});  // Holds the amount of token each member has in state.\n  const [memberAddresses, setMemberAddresses] = useState([]);   // The array holding all of our members addresses.\n  const [proposals, setProposals] = useState([]); // The array holding all the proposals\n  const [isVoting, setIsVoting] = useState(false); // isVoting lets us easily keep a voting state while the voting is carried out\n  const [hasVoted, setHasVoted] = useState(false); // hasVoted lets us easily track whether or not a member has already voted\n  const shortenAddress = (str) => { return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);}; // A fancy function to shorten someones wallet address\n\n  // useEffect #1: Grabs all our the addresses of our members holding our NFT. Is executed whenever the \"hasClaimedNFT\" value changes\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0.\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresess) => {\n        console.log(\"🚀 Members addresses\", addresess);\n        setMemberAddresses(addresess);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // useEffect #2: Grabs the # of token each member holds. Is executed whenever the \"hasClaimedNFT\" value changes\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Grab all the balances.\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"👜 Amounts\", amounts);\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // useMemo: Now, we combine the memberAddresses and memberTokenAmounts into a single array\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  // useEffect #3: Ensures  our signer can interact with our deployed contract. Is executed whenever the \"signer\" value changes\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact with\n    // our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  // useEffect #4 Checks if the user has membership NFT. Is executed whenever the \"address\" value changes\n  useEffect(() => {\n    if (!address) {\n      return;\n    }\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\");\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.error(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // useEffect #5: Retreives all our existing proposals from the contract. Is executed whenever the \"hasClaimedNFT\" value flips\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals.\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        // Set state!\n        setProposals(proposals);\n        console.log(\"🌈 Proposals:\", proposals);\n      })\n      .catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // useEffect #6: Checks if the user already voted. Is executed whenever the \"hasClaimedNFT\", \"proposals\" or \"address\" values change\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retreieving the proposals from the useEffect above\n    // then we can't check if the user voted yet!\n    if (!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        console.log(\"🥵 User has already voted\");\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n\n  // After al the use effects taking care of function executions due to state changes, we finally decide what to render. \n  // If it's unsupported chain, inform the user\n  if (error && error.name === \"UnsupportedChainIdError\") {\n    return (\n      <div className=\"unsupported-network\">\n        <h2>Please connect to Rinkeby</h2>\n        <p>\n          This dapp only works on the Rinkeby network, please switch networks in\n          your connected wallet.\n        </p>\n      </div>\n    );\n  }\n\n  // If there's no address, show the \"connect\" wallet Home page\n  if (!address) {\n    return <Home clickHandler={() => connectWallet(\"injected\")} />;\n  }\n\n  // If the user has already claimed their NFT we want to display the interal DAO page to them\n  // only DAO members will see this. Render all the members + token amounts.\n  if (hasClaimedNFT) {\n   \n  }\n\n  // Render mint nft screen.\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪DAO Membership NFT</h1>\n      <button\n        disabled={isClaiming}\n        onClick={() => {\n          setIsClaiming(true);\n          // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's wallet.\n          bundleDropModule\n            .claim(\"0\", 1)\n            .catch((err) => {\n              console.error(\"failed to claim\", err);\n              setIsClaiming(false);\n            })\n            .finally(() => {\n              // Stop loading state.\n              setIsClaiming(false);\n              // Set claim state.\n              setHasClaimedNFT(true);\n              // Show user their fancy new NFT!\n              console.log(\n                `Successfully Minted! Check it our on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n              );\n            });\n        }}\n      >\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}