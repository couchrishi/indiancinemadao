{"ast":null,"code":"var _jsxFileName = \"/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\"; //import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK, TokenModule } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\"; // We instantiate the SDK on Rinkeyby\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We can grab a reference to our ERC-1155 contract.\n\nconst bundleDropModule = sdk.getBundleDropModule(\"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\"); // We can grab a reference to our ERC-20 token contract.\n\nconst tokenModule = sdk.getTokenModule(\"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\"); // We can grab a reference to our voting contract.\n\nconst voteModule = sdk.getVoteModule(\"0xe1c1e8bc1B20AeAf8702C6f87D77422bed61C27f\");\n\nconst App = () => {\n  _s();\n\n  // Use connectWallet hook thirdweb gives us\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋  Address: \", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined; // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]); // State variables for voting on proposals\n\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false); // Retrieve all our existing proposals from the contract. \n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // A simple call to voteModule.getAll() to grab the proposals\n\n\n    voteModule.getAll().then(proposals => {\n      setProposals(proposals);\n      console.log(\"🌈 Proposals:\", proposals);\n    }).catch(err => {\n      console.error(\"failed to get proposals\", err);\n    });\n  }, [hasClaimedNFT]); // We also need to check if the user already voted.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet! \n\n\n    if (!proposals.length) {\n      return;\n    } // Check if the user has already voted on the first proposal.\n\n\n    voteModule.hasVoted(proposals[0].proposalId, address).then(hasVoted => {\n      setHasVoted(hasVoted);\n      console.log(\"🥵  User has already voted\");\n    }).catch(err => {\n      console.error(\"failed to check if wallet has voted\", err);\n    });\n  }, [hasClaimedNFT, proposals, address]); // A fancy function to shorten someones wallet address, no need to show the whole address\n\n  const shortenAddress = str => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  }; // This useEffect grabs all the addresses of our members holding our NFT.\n\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0\n\n\n    bundleDropModule.getAllClaimerAddresses(\"0\").then(addresses => {\n      console.log(\"🚀 Members addresses\", addresses);\n      setMemberAddresses(addresses);\n    }).catch(err => {\n      console.error(\"failed to get member list\", err);\n    });\n  }, [hasClaimedNFT]); // This useEffect grabs the # of token each member holds.\n\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    } // Grab all the balances\n\n\n    tokenModule.getAllHolderBalances().then(amounts => {\n      console.log(\"👜 Amounts\", amounts);\n      setMemberTokenAmounts(amounts);\n    }).catch(err => {\n      console.error(\"failed to get token amounts\", err);\n    });\n  }, [hasClaimedNFT]); // Now, we combine the memberAddresses and memberTOkenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map(address => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits( // If the address isn't in memberTokenAmounts, it means they don't\n        // hold any of our token.\n        memberTokenAmounts[address] || 0, 18)\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]); // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact\n    // with our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(() => {\n    // If they don't have a connected wallet, exit!\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.lerror(\"failed to nft balance\", error);\n    });\n  }, [address]); // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Welcome to IndianCinemaDAO \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6A Indian Cinema DAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Congratulations on being a member \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \" Member List \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 212,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \" $SEAT \"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 213,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 211,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 210,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: memberList.map(member => {\n                return /*#__PURE__*/_jsxDEV(\"tr\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                    children: [\" \", shortenAddress(member.address)]\n                  }, void 0, true, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 23\n                  }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                    children: member.tokenAmount\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 221,\n                    columnNumber: 23\n                  }, this)]\n                }, member.address, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 219,\n                  columnNumber: 21\n                }, this);\n              })\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 216,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 209,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: \"Active Proposals\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 229,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: async e => {\n              e.preventDefault();\n              e.stopPropagation(); // before we do async things, we want to disable the button to prevent double clicks\n\n              setIsVoting(true); // Let's get the votes from the form for the values\n\n              const votes = proposals.map(proposal => {\n                let voteResult = {\n                  proposalId: proposal.proposalId,\n                  //abstain by default\n                  vote: 2\n                };\n                proposal.votes.forEach(vote => {\n                  const elem = document.getElementById(proposal.proposalId + \"-\" + vote.type);\n\n                  if (elem.checked) {\n                    voteResult.vote = vote.type;\n                    return;\n                  }\n                });\n                return voteResult;\n              }); // first we need to make sure the user delegates their token to vote\n\n              try {\n                // we'll check if the wallet still needs to delegate their tokens before they can vote\n                const delegation = await tokenModule.getDelegationOf(address); // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n\n                if (delegation === ethers.constants.AddressZero) {\n                  // if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                  await tokenModule.delegateTo(address);\n                } // then we need to vote on the proposals\n\n\n                try {\n                  await Promise.all(votes.map(async vote => {\n                    // before voting we first need to check whether the proposal is open for voting\n                    // we first tneed to get the latest state of the proposal\n                    const proposal = await voteModule.get(vote.proposalId); // then we check if the proposal is open for voting (state === 1 means it is open)\n\n                    if (proposal.state === 1) {\n                      // if it is open for voting, we'll vote on it\n                      return voteModule.vote(vote.proposalId, vote.vote);\n                    } // if the proposal is not open for voting we just return nothing, letting us continue\n\n\n                    return;\n                  }));\n\n                  try {\n                    // if any of the proposals are ready to be executed we'll need to execute them\n                    // a proposal is ready to be executed if it is in state 4\n                    await Promise.all(votes.map(async vote => {\n                      // we'll first get the latest state of the proposal again, since we may have just voted before\n                      const proposal = await voteModule.get(vote.proposalId); // if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n\n                      if (proposal.state === 4) {\n                        return voteModule.execute(vote.proposalId);\n                      }\n                    })); // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n\n                    setHasVoted(true); // and log out a success message\n\n                    console.log(\"successfully voted\");\n                  } catch (err) {\n                    console.error(\"failed to execute votes\", err);\n                  }\n                } catch (err) {\n                  console.error(\"failed to vote\", err);\n                }\n              } catch (err) {\n                console.error(\"failed to delegate tokens\", err);\n              } finally {\n                // in *either* case we need to set the isVoting state to false to enable the button again\n                setIsVoting(false);\n              }\n            },\n            children: proposals\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 230,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mintNFT = () => {\n    setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's walelt\n\n    bundleDropModule.claim(\"0\", 1).catch(err => {\n      console.error(\"failed to claim\", err);\n      setIsClaiming(false);\n    }).finally(() => {\n      // Stop loading state.\n      setIsClaiming(false); // Set claim state.\n\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n    });\n  }; // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6AIndianCinema Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 362,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNFT(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 361,\n    columnNumber: 5\n  }, this); // This is the case where we have the user's address\n  // which means they've connected their wallet to your site!\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC40 wallet connected \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 373,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 372,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"zSngI9kpmfjcRvQvRKnagr/O7EQ=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx"],"names":["useEffect","useMemo","useState","useWeb3","ThirdwebSDK","TokenModule","ethers","sdk","bundleDropModule","getBundleDropModule","tokenModule","getTokenModule","voteModule","getVoteModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","proposals","setProposals","isVoting","setIsVoting","hasVoted","setHasVoted","getAll","then","catch","err","length","proposalId","shortenAddress","str","substring","getAllClaimerAddresses","addresses","getAllHolderBalances","amounts","memberList","map","tokenAmount","utils","formatUnits","setProviderOrSigner","balanceOf","balance","gt","lerror","member","e","preventDefault","stopPropagation","votes","proposal","voteResult","vote","forEach","elem","document","getElementById","type","checked","delegation","getDelegationOf","constants","AddressZero","delegateTo","Promise","all","get","state","execute","mintNFT","claim","finally"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,OAApB,EAA6BC,QAA7B,QAA6C,OAA7C,C,CAEA;;AACA,SAASC,OAAT,QAAwB,eAAxB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AAEA,SAASC,MAAT,QAAuB,QAAvB,C,CAEA;;;AACA,MAAMC,GAAG,GAAG,IAAIH,WAAJ,CAAgB,SAAhB,CAAZ,C,CAEA;;AACA,MAAMI,gBAAgB,GAAGD,GAAG,CAACE,mBAAJ,CACvB,4CADuB,CAAzB,C,CAIA;;AACA,MAAMC,WAAW,GAAGH,GAAG,CAACI,cAAJ,CAClB,4CADkB,CAApB,C,CAIA;;AACA,MAAMC,UAAU,GAAGL,GAAG,CAACM,aAAJ,CACjB,4CADiB,CAAnB;;AAMA,MAAMC,GAAG,GAAG,MAAM;AAAA;;AAChB;AACA,QAAM;AAAEC,IAAAA,aAAF;AAAiBC,IAAAA,OAAjB;AAA0BC,IAAAA,KAA1B;AAAiCC,IAAAA;AAAjC,MAA8Cf,OAAO,EAA3D;AACAgB,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BJ,OAA7B,EAHgB,CAKhB;AACA;;AACA,QAAMK,MAAM,GAAGH,QAAQ,GAAGA,QAAQ,CAACI,SAAT,EAAH,GAA0BC,SAAjD,CAPgB,CAShB;;AACA,QAAM,CAACC,aAAD,EAAgBC,gBAAhB,IAAoCvB,QAAQ,CAAC,KAAD,CAAlD,CAVgB,CAYhB;;AACA,QAAM,CAACwB,UAAD,EAAaC,aAAb,IAA8BzB,QAAQ,CAAC,KAAD,CAA5C,CAbgB,CAehB;;AACA,QAAM,CAAC0B,kBAAD,EAAqBC,qBAArB,IAA8C3B,QAAQ,CAAC,EAAD,CAA5D,CAhBgB,CAkBhB;;AACA,QAAM,CAAC4B,eAAD,EAAkBC,kBAAlB,IAAwC7B,QAAQ,CAAC,EAAD,CAAtD,CAnBgB,CAqBhB;;AACA,QAAM,CAAC8B,SAAD,EAAYC,YAAZ,IAA4B/B,QAAQ,CAAC,EAAD,CAA1C;AACA,QAAM,CAACgC,QAAD,EAAWC,WAAX,IAA0BjC,QAAQ,CAAC,KAAD,CAAxC;AACA,QAAM,CAACkC,QAAD,EAAWC,WAAX,IAA0BnC,QAAQ,CAAC,KAAD,CAAxC,CAxBgB,CA0BhB;;AACAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAId;;;AACAZ,IAAAA,UAAU,CACP0B,MADH,GAEGC,IAFH,CAESP,SAAD,IAAe;AACnBC,MAAAA,YAAY,CAACD,SAAD,CAAZ;AACAb,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BY,SAA7B;AACD,KALH,EAKKQ,KALL,CAKYC,GAAD,IAAS;AAChBtB,MAAAA,OAAO,CAACF,KAAR,CAAc,yBAAd,EAAyCwB,GAAzC;AACD,KAPH;AAQD,GAbQ,EAaN,CAACjB,aAAD,CAbM,CAAT,CA3BgB,CA0ChB;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAKd;AACA;;;AACA,QAAG,CAACQ,SAAS,CAACU,MAAd,EAAsB;AACpB;AACD,KATa,CAWd;;;AACA9B,IAAAA,UAAU,CACPwB,QADH,CACYJ,SAAS,CAAC,CAAD,CAAT,CAAaW,UADzB,EACqC3B,OADrC,EAEGuB,IAFH,CAESH,QAAD,IAAc;AAClBC,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAjB,MAAAA,OAAO,CAACC,GAAR,CAAY,4BAAZ;AACD,KALH,EAMGoB,KANH,CAMUC,GAAD,IAAS;AACdtB,MAAAA,OAAO,CAACF,KAAR,CAAc,qCAAd,EAAqDwB,GAArD;AACD,KARH;AASD,GArBQ,EAqBN,CAACjB,aAAD,EAAgBQ,SAAhB,EAA2BhB,OAA3B,CArBM,CAAT,CA3CgB,CAmEhB;;AACA,QAAM4B,cAAc,GAAIC,GAAD,IAAS;AAC9B,WAAOA,GAAG,CAACC,SAAJ,CAAc,CAAd,EAAiB,CAAjB,IAAsB,KAAtB,GAA8BD,GAAG,CAACC,SAAJ,CAAcD,GAAG,CAACH,MAAJ,GAAa,CAA3B,CAArC;AACD,GAFD,CApEgB,CAwEhB;;;AACA1C,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAKd;AACA;;;AACAhB,IAAAA,gBAAgB,CACbuC,sBADH,CAC0B,GAD1B,EAEGR,IAFH,CAESS,SAAD,IAAe;AACnB7B,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ,EAAoC4B,SAApC;AACAjB,MAAAA,kBAAkB,CAACiB,SAAD,CAAlB;AACD,KALH,EAMGR,KANH,CAMUC,GAAD,IAAS;AACdtB,MAAAA,OAAO,CAACF,KAAR,CAAc,2BAAd,EAA2CwB,GAA3C;AACD,KARH;AASD,GAhBQ,EAgBN,CAACjB,aAAD,CAhBM,CAAT,CAzEgB,CA2FhB;;AACAxB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAI,CAACwB,aAAL,EAAoB;AAClB;AACD,KAHa,CAKd;;;AACAd,IAAAA,WAAW,CACRuC,oBADH,GAEGV,IAFH,CAESW,OAAD,IAAa;AACjB/B,MAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ,EAA0B8B,OAA1B;AACArB,MAAAA,qBAAqB,CAACqB,OAAD,CAArB;AACD,KALH,EAMGV,KANH,CAMUC,GAAD,IAAS;AACdtB,MAAAA,OAAO,CAACF,KAAR,CAAc,6BAAd,EAA6CwB,GAA7C;AACD,KARH;AASD,GAfQ,EAeN,CAACjB,aAAD,CAfM,CAAT,CA5FgB,CA6GhB;;AAEA,QAAM2B,UAAU,GAAGlD,OAAO,CAAC,MAAM;AAC/B,WAAO6B,eAAe,CAACsB,GAAhB,CAAqBpC,OAAD,IAAa;AACtC,aAAO;AACLA,QAAAA,OADK;AAELqC,QAAAA,WAAW,EAAE/C,MAAM,CAACgD,KAAP,CAAaC,WAAb,EACX;AACA;AACA3B,QAAAA,kBAAkB,CAACZ,OAAD,CAAlB,IAA+B,CAHpB,EAIX,EAJW;AAFR,OAAP;AASD,KAVM,CAAP;AAWD,GAZyB,EAYvB,CAACc,eAAD,EAAkBF,kBAAlB,CAZuB,CAA1B,CA/GgB,CA6HhB;;AAEA5B,EAAAA,SAAS,CAAC,MAAM;AACd;AACA;AACAO,IAAAA,GAAG,CAACiD,mBAAJ,CAAwBnC,MAAxB;AACD,GAJQ,EAIN,CAACA,MAAD,CAJM,CAAT;AAMArB,EAAAA,SAAS,CAAC,MAAM;AACd;AACA,QAAI,CAACgB,OAAL,EAAc;AACZ;AACD,KAJa,CAMd;;;AACA,WAAOR,gBAAgB,CACpBiD,SADI,CACMzC,OADN,EACe,GADf,EAEJuB,IAFI,CAEEmB,OAAD,IAAa;AACjB;AACA,UAAIA,OAAO,CAACC,EAAR,CAAW,CAAX,CAAJ,EAAmB;AACjBlC,QAAAA,gBAAgB,CAAC,IAAD,CAAhB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACD,OAHD,MAGO;AACLK,QAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAN,QAAAA,OAAO,CAACC,GAAR,CAAY,6CAAZ;AACD;AACF,KAXI,EAYJoB,KAZI,CAYGvB,KAAD,IAAW;AAChBQ,MAAAA,gBAAgB,CAAC,KAAD,CAAhB;AACAN,MAAAA,OAAO,CAACyC,MAAR,CAAe,uBAAf,EAAwC3C,KAAxC;AACD,KAfI,CAAP;AAgBD,GAvBQ,EAuBN,CAACD,OAAD,CAvBM,CAAT,CArIgB,CA8JhB;AACA;;AAEA,MAAI,CAACA,OAAL,EAAc;AACZ,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAMD,aAAa,CAAC,UAAD,CAApC;AAAkD,QAAA,SAAS,EAAC,UAA5D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAQD;;AAED,MAAIS,aAAJ,EAAmB;AACjB,wBACE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAA,gCACE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AAAO,YAAA,SAAS,EAAC,MAAjB;AAAA,oCACE;AAAA,qCACE;AAAA,wCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,oBADF,eAOE;AAAA,wBACG2B,UAAU,CAACC,GAAX,CAAgBS,MAAD,IAAY;AAC1B,oCACE;AAAA,0CACE;AAAA,oCAAMjB,cAAc,CAACiB,MAAM,CAAC7C,OAAR,CAApB;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,eAEE;AAAA,8BAAK6C,MAAM,CAACR;AAAZ;AAAA;AAAA;AAAA;AAAA,0BAFF;AAAA,mBAASQ,MAAM,CAAC7C,OAAhB;AAAA;AAAA;AAAA;AAAA,wBADF;AAMD,eAPA;AADH;AAAA;AAAA;AAAA;AAAA,oBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAsBE;AAAA,kCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,eAEE;AACG,YAAA,QAAQ,EAAE,MAAO8C,CAAP,IAAa;AACrBA,cAAAA,CAAC,CAACC,cAAF;AACAD,cAAAA,CAAC,CAACE,eAAF,GAFqB,CAIrB;;AACA7B,cAAAA,WAAW,CAAC,IAAD,CAAX,CALqB,CAOrB;;AACA,oBAAM8B,KAAK,GAAEjC,SAAS,CAACoB,GAAV,CAAec,QAAD,IAAc;AACvC,oBAAIC,UAAU,GAAG;AACfxB,kBAAAA,UAAU,EAAEuB,QAAQ,CAACvB,UADN;AAEf;AACAyB,kBAAAA,IAAI,EAAE;AAHS,iBAAjB;AAKAF,gBAAAA,QAAQ,CAACD,KAAT,CAAeI,OAAf,CAAwBD,IAAD,IAAU;AAC/B,wBAAME,IAAI,GAAGC,QAAQ,CAACC,cAAT,CACXN,QAAQ,CAACvB,UAAT,GAAsB,GAAtB,GAA4ByB,IAAI,CAACK,IADtB,CAAb;;AAIA,sBAAIH,IAAI,CAACI,OAAT,EAAkB;AAChBP,oBAAAA,UAAU,CAACC,IAAX,GAAkBA,IAAI,CAACK,IAAvB;AACA;AACD;AAEF,iBAVD;AAWA,uBAAON,UAAP;AACD,eAlBY,CAAb,CARqB,CA4BrB;;AACA,kBAAI;AACF;AACA,sBAAMQ,UAAU,GAAG,MAAMjE,WAAW,CAACkE,eAAZ,CAA4B5D,OAA5B,CAAzB,CAFE,CAGF;;AACA,oBAAI2D,UAAU,KAAKrE,MAAM,CAACuE,SAAP,CAAiBC,WAApC,EAAiD;AAC/C;AACA,wBAAMpE,WAAW,CAACqE,UAAZ,CAAuB/D,OAAvB,CAAN;AACD,iBAPC,CAQF;;;AACA,oBAAI;AACF,wBAAMgE,OAAO,CAACC,GAAR,CACJhB,KAAK,CAACb,GAAN,CAAU,MAAOgB,IAAP,IAAgB;AACxB;AACA;AACA,0BAAMF,QAAQ,GAAG,MAAMtD,UAAU,CAACsE,GAAX,CAAed,IAAI,CAACzB,UAApB,CAAvB,CAHwB,CAIxB;;AACA,wBAAIuB,QAAQ,CAACiB,KAAT,KAAmB,CAAvB,EAA0B;AACxB;AACA,6BAAOvE,UAAU,CAACwD,IAAX,CAAgBA,IAAI,CAACzB,UAArB,EAAiCyB,IAAI,CAACA,IAAtC,CAAP;AACD,qBARuB,CASxB;;;AACA;AACD,mBAXD,CADI,CAAN;;AAeA,sBAAI;AACF;AACA;AACA,0BAAMY,OAAO,CAACC,GAAR,CACJhB,KAAK,CAACb,GAAN,CAAU,MAAOgB,IAAP,IAAgB;AACxB;AACA,4BAAMF,QAAQ,GAAG,MAAMtD,UAAU,CAACsE,GAAX,CACrBd,IAAI,CAACzB,UADgB,CAAvB,CAFwB,CAMxB;;AACA,0BAAGuB,QAAQ,CAACiB,KAAT,KAAmB,CAAtB,EAAyB;AACvB,+BAAOvE,UAAU,CAACwE,OAAX,CAAmBhB,IAAI,CAACzB,UAAxB,CAAP;AACD;AACF,qBAVD,CADI,CAAN,CAHE,CAiBF;;AACAN,oBAAAA,WAAW,CAAC,IAAD,CAAX,CAlBE,CAmBF;;AACAlB,oBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AAED,mBAtBD,CAsBE,OAAMqB,GAAN,EAAW;AACXtB,oBAAAA,OAAO,CAACF,KAAR,CAAc,yBAAd,EAAyCwB,GAAzC;AACD;AACF,iBAzCD,CAyCE,OAAOA,GAAP,EAAY;AACZtB,kBAAAA,OAAO,CAACF,KAAR,CAAc,gBAAd,EAAgCwB,GAAhC;AACD;AACF,eArDD,CAqDE,OAAOA,GAAP,EAAY;AACZtB,gBAAAA,OAAO,CAACF,KAAR,CAAc,2BAAd,EAA2CwB,GAA3C;AACD,eAvDD,SAuDU;AACR;AACAN,gBAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AAEF,aA1FJ;AAAA,sBA2FMH;AA3FN;AAAA;AAAA;AAAA;AAAA,kBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAqID;;AAED,QAAMqD,OAAO,GAAG,MAAM;AACpB1D,IAAAA,aAAa,CAAC,IAAD,CAAb,CADoB,CAEpB;;AACAnB,IAAAA,gBAAgB,CACb8E,KADH,CACS,GADT,EACc,CADd,EAEG9C,KAFH,CAEUC,GAAD,IAAS;AACdtB,MAAAA,OAAO,CAACF,KAAR,CAAc,iBAAd,EAAiCwB,GAAjC;AACAd,MAAAA,aAAa,CAAC,KAAD,CAAb;AACD,KALH,EAMG4D,OANH,CAMW,MAAM;AACb;AACA5D,MAAAA,aAAa,CAAC,KAAD,CAAb,CAFa,CAGb;;AACAF,MAAAA,gBAAgB,CAAC,IAAD,CAAhB,CAJa,CAKb;;AACAN,MAAAA,OAAO,CAACC,GAAR,CACG,uFAAsFZ,gBAAgB,CAACQ,OAAQ,IADlH;AAGD,KAfH;AAgBD,GAnBD,CApTgB,CAyUhB;;;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAQ,MAAA,QAAQ,EAAEU,UAAlB;AAA8B,MAAA,OAAO,EAAE,MAAM2D,OAAO,EAApD;AAAA,gBACG3D,UAAU,GAAG,YAAH,GAAkB;AAD/B;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF,CA3UgB,CAoVhB;AACA;;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,2BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CA3VD;;GAAMZ,G;UAEgDX,O;;;KAFhDW,G;AA6VN,eAAeA,GAAf","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\n\n//import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK, TokenModule } from \"@3rdweb/sdk\";\n\nimport { ethers } from \"ethers\";\n\n// We instantiate the SDK on Rinkeyby\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\"\n);\n\n// We can grab a reference to our ERC-20 token contract.\nconst tokenModule = sdk.getTokenModule(\n  \"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\"\n);\n\n// We can grab a reference to our voting contract.\nconst voteModule = sdk.getVoteModule(\n  \"0xe1c1e8bc1B20AeAf8702C6f87D77422bed61C27f\"\n);\n\n\n\nconst App = () => {\n  // Use connectWallet hook thirdweb gives us\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋  Address: \", address);\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  // State variable for us to know if user has our NFT.\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n  // isClaiming lets us easily keep a loading state while the NFT is minting\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  // Holds the amount of token each member has in state.\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n\n  // The array holding all of our members addresses.\n  const [memberAddresses, setMemberAddresses] = useState([]);\n  \n  // State variables for voting on proposals\n  const [proposals, setProposals] = useState([]);\n  const [isVoting, setIsVoting] = useState(false);\n  const [hasVoted, setHasVoted] = useState(false);\n\n  // Retrieve all our existing proposals from the contract. \n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n    // A simple call to voteModule.getAll() to grab the proposals\n    voteModule\n      .getAll()\n      .then((proposals) => {\n        setProposals(proposals);\n        console.log(\"🌈 Proposals:\", proposals);\n      }).catch((err) => {\n        console.error(\"failed to get proposals\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // We also need to check if the user already voted.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // If we haven't finished retrieving the proposals from the useEffect above\n    // then we can't check if the user voted yet! \n    if(!proposals.length) {\n      return;\n    }\n\n    // Check if the user has already voted on the first proposal.\n    voteModule\n      .hasVoted(proposals[0].proposalId, address)\n      .then((hasVoted) => {\n        setHasVoted(hasVoted);\n        console.log(\"🥵  User has already voted\")\n      })\n      .catch((err) => {\n        console.error(\"failed to check if wallet has voted\", err);\n      });\n  }, [hasClaimedNFT, proposals, address]);\n\n\n  // A fancy function to shorten someones wallet address, no need to show the whole address\n  const shortenAddress = (str) => {\n    return str.substring(0, 6) + \"...\" + str.substring(str.length - 4);\n  };\n\n  // This useEffect grabs all the addresses of our members holding our NFT.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Just like we did in the 7-airdrop-token.js file! Grab the users who hold our NFT\n    // with tokenId 0\n    bundleDropModule\n      .getAllClaimerAddresses(\"0\")\n      .then((addresses) => {\n        console.log(\"🚀 Members addresses\", addresses);\n        setMemberAddresses(addresses);\n      })\n      .catch((err) => {\n        console.error(\"failed to get member list\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // This useEffect grabs the # of token each member holds.\n  useEffect(() => {\n    if (!hasClaimedNFT) {\n      return;\n    }\n\n    // Grab all the balances\n    tokenModule\n      .getAllHolderBalances()\n      .then((amounts) => {\n        console.log(\"👜 Amounts\", amounts);\n        setMemberTokenAmounts(amounts);\n      })\n      .catch((err) => {\n        console.error(\"failed to get token amounts\", err);\n      });\n  }, [hasClaimedNFT]);\n\n  // Now, we combine the memberAddresses and memberTOkenAmounts into a single array\n\n  const memberList = useMemo(() => {\n    return memberAddresses.map((address) => {\n      return {\n        address,\n        tokenAmount: ethers.utils.formatUnits(\n          // If the address isn't in memberTokenAmounts, it means they don't\n          // hold any of our token.\n          memberTokenAmounts[address] || 0,\n          18\n        ),\n      };\n    });\n  }, [memberAddresses, memberTokenAmounts]);\n\n  // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact\n    // with our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // If they don't have a connected wallet, exit!\n    if (!address) {\n      return;\n    }\n\n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\");\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.lerror(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1> Welcome to IndianCinemaDAO </h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪 Indian Cinema DAO Member Page</h1>\n        <p> Congratulations on being a member </p>\n        <div>\n          <div>\n            <h2> Member List </h2>\n            <table className=\"card\">\n              <thead>\n                <tr>\n                  <th>Address</th>\n                  <th> $SEAT </th>\n                </tr>\n              </thead>\n              <tbody>\n                {memberList.map((member) => {\n                  return (\n                    <tr key={member.address}>\n                      <td> {shortenAddress(member.address)}</td>\n                      <th>{member.tokenAmount}</th>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n          <div>\n            <h2>Active Proposals</h2>\n            <form \n               onSubmit={async (e) => {\n                 e.preventDefault();\n                 e.stopPropagation();\n\n                 // before we do async things, we want to disable the button to prevent double clicks\n                 setIsVoting(true);\n\n                 // Let's get the votes from the form for the values\n                 const votes= proposals.map((proposal) => {\n                   let voteResult = {\n                     proposalId: proposal.proposalId,\n                     //abstain by default\n                     vote: 2,\n                   };\n                   proposal.votes.forEach((vote) => {\n                     const elem = document.getElementById(\n                       proposal.proposalId + \"-\" + vote.type\n                     );\n\n                     if (elem.checked) {\n                       voteResult.vote = vote.type;\n                       return;\n                     }\n\n                   });\n                   return voteResult;\n                 });\n\n                 // first we need to make sure the user delegates their token to vote\n                 try {\n                   // we'll check if the wallet still needs to delegate their tokens before they can vote\n                   const delegation = await tokenModule.getDelegationOf(address);\n                   // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                   if (delegation === ethers.constants.AddressZero) {\n                     // if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                     await tokenModule.delegateTo(address);\n                   } \n                   // then we need to vote on the proposals\n                   try {\n                     await Promise.all(\n                       votes.map(async (vote) => {\n                         // before voting we first need to check whether the proposal is open for voting\n                         // we first tneed to get the latest state of the proposal\n                         const proposal = await voteModule.get(vote.proposalId);\n                         // then we check if the proposal is open for voting (state === 1 means it is open)\n                         if (proposal.state === 1) {\n                           // if it is open for voting, we'll vote on it\n                           return voteModule.vote(vote.proposalId, vote.vote);\n                         }\n                         // if the proposal is not open for voting we just return nothing, letting us continue\n                         return;\n                       })\n                     );\n\n                     try {\n                       // if any of the proposals are ready to be executed we'll need to execute them\n                       // a proposal is ready to be executed if it is in state 4\n                       await Promise.all(\n                         votes.map(async (vote) => {\n                           // we'll first get the latest state of the proposal again, since we may have just voted before\n                           const proposal = await voteModule.get(\n                             vote.proposalId\n                           );\n\n                           // if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                           if(proposal.state === 4) {\n                             return voteModule.execute(vote.proposalId);\n                           }\n                         })\n                       );\n\n                       // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                       setHasVoted(true);\n                       // and log out a success message\n                       console.log(\"successfully voted\");\n\n                     } catch(err) {\n                       console.error(\"failed to execute votes\", err);\n                     }\n                   } catch (err) {\n                     console.error(\"failed to vote\", err);\n                   }\n                 } catch (err) {\n                   console.error(\"failed to delegate tokens\", err);\n                 } finally {\n                   // in *either* case we need to set the isVoting state to false to enable the button again\n                   setIsVoting(false);\n                 }\n\n               }}>\n                 {proposals}\n\n\n\n\n\n\n\n               </form>\n          </div>\n\n        </div>\n      </div>\n    );\n  }\n\n  const mintNFT = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's walelt\n    bundleDropModule\n      .claim(\"0\", 1)\n      .catch((err) => {\n        console.error(\"failed to claim\", err);\n        setIsClaiming(false);\n      })\n      .finally(() => {\n        // Stop loading state.\n        setIsClaiming(false);\n        // Set claim state.\n        setHasClaimedNFT(true);\n        // Show user their fancy new NFT!\n        console.log(\n          `🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      });\n  };\n\n  // Render mint nft screen.\n\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪IndianCinema Membership NFT</h1>\n      <button disabled={isClaiming} onClick={() => mintNFT()}>\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n\n  // This is the case where we have the user's address\n  // which means they've connected their wallet to your site!\n  return (\n    <div className=\"landing\">\n      <h1>👀 wallet connected </h1>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}