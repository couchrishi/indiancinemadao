{"ast":null,"code":"var _jsxFileName = \"/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/components/Member.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Member(props) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"member-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83C\\uDF6AIndian Cinema DAO Member Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Congratulations on being a member\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Member List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n          className: \"card\",\n          children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n            children: /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Address\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 15,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                children: \"Token Amount\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 16,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 14,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 13,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n            children: memberList.map(member => {\n              return /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                  children: shortenAddress(member.address)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 23,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                  children: member.tokenAmount\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 24,\n                  columnNumber: 25\n                }, this)]\n              }, member.address, true, {\n                fileName: _jsxFileName,\n                lineNumber: 22,\n                columnNumber: 23\n              }, this);\n            })\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Active Proposals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n          onSubmit: async e => {\n            e.preventDefault();\n            e.stopPropagation(); //before we do async things, we want to disable the button to prevent double clicks\n            //setIsVoting(true);\n\n            props.doubleClickHandler(); // lets get the votes from the form for the values\n\n            const votes = proposals.map(proposal => {\n              let voteResult = {\n                proposalId: proposal.proposalId,\n                //abstain by default\n                vote: 2\n              };\n              proposal.votes.forEach(vote => {\n                const elem = document.getElementById(proposal.proposalId + \"-\" + vote.type);\n\n                if (elem.checked) {\n                  voteResult.vote = vote.type;\n                  return;\n                }\n              });\n              return voteResult;\n            }); // first we need to make sure the user delegates their token to vote\n\n            try {\n              //we'll check if the wallet still needs to delegate their tokens before they can vote\n              const delegation = await tokenModule.getDelegationOf(address); // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n\n              if (delegation === ethers.constants.AddressZero) {\n                //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                await tokenModule.delegateTo(address);\n              } // then we need to vote on the proposals\n\n\n              try {\n                await Promise.all(votes.map(async vote => {\n                  // before voting we first need to check whether the proposal is open for voting\n                  // we first need to get the latest state of the proposal\n                  const proposal = await voteModule.get(vote.proposalId); // then we check if the proposal is open for voting (state === 1 means it is open)\n\n                  if (proposal.state === 1) {\n                    // if it is open for voting, we'll vote on it\n                    return voteModule.vote(vote.proposalId, vote.vote);\n                  } // if the proposal is not open for voting we just return nothing, letting us continue\n\n\n                  return;\n                }));\n\n                try {\n                  // if any of the propsals are ready to be executed we'll need to execute them\n                  // a proposal is ready to be executed if it is in state 4\n                  await Promise.all(votes.map(async vote => {\n                    // we'll first get the latest state of the proposal again, since we may have just voted before\n                    const proposal = await voteModule.get(vote.proposalId); //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n\n                    if (proposal.state === 4) {\n                      return voteModule.execute(vote.proposalId);\n                    }\n                  })); // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n\n                  setHasVoted(true); // and log out a success message\n\n                  console.log(\"successfully voted\");\n                } catch (err) {\n                  console.error(\"failed to execute votes\", err);\n                }\n              } catch (err) {\n                console.error(\"failed to vote\", err);\n              }\n            } catch (err) {\n              console.error(\"failed to delegate tokens\");\n            } finally {\n              // in *either* case we need to set the isVoting state to false to enable the button again\n              setIsVoting(false);\n            }\n          },\n          children: [proposals.map((proposal, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"card\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              children: proposal.description\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 123,\n              columnNumber: 21\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: proposal.votes.map(vote => /*#__PURE__*/_jsxDEV(\"div\", {\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"radio\",\n                  id: proposal.proposalId + \"-\" + vote.type,\n                  name: proposal.proposalId,\n                  value: vote.type //default the \"abstain\" vote to chedked\n                  ,\n                  defaultChecked: vote.type === 2\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 127,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: proposal.proposalId + \"-\" + vote.type,\n                  children: vote.label\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 135,\n                  columnNumber: 27\n                }, this)]\n              }, vote.type, true, {\n                fileName: _jsxFileName,\n                lineNumber: 126,\n                columnNumber: 25\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 124,\n              columnNumber: 21\n            }, this)]\n          }, proposal.proposalId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 122,\n            columnNumber: 19\n          }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n            disabled: isVoting || hasVoted,\n            type: \"submit\",\n            children: isVoting ? \"Voting...\" : hasVoted ? \"You Already Voted\" : \"Submit Votes\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 143,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"small\", {\n            children: \"This will trigger multiple transactions that you will need to sign.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 9\n  }, this);\n}\n_c = Member;\n\nvar _c;\n\n$RefreshReg$(_c, \"Member\");","map":{"version":3,"sources":["/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/components/Member.jsx"],"names":["React","Member","props","memberList","map","member","shortenAddress","address","tokenAmount","e","preventDefault","stopPropagation","doubleClickHandler","votes","proposals","proposal","voteResult","proposalId","vote","forEach","elem","document","getElementById","type","checked","delegation","tokenModule","getDelegationOf","ethers","constants","AddressZero","delegateTo","Promise","all","voteModule","get","state","execute","setHasVoted","console","log","err","error","setIsVoting","index","description","label","isVoting","hasVoted"],"mappings":";AACA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,eAAe,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;AAClC,sBACI;AAAK,IAAA,SAAS,EAAC,aAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAGE;AAAA,8BACE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AAAO,UAAA,SAAS,EAAC,MAAjB;AAAA,kCACE;AAAA,mCACE;AAAA,sCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAFF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,kBADF,eAOE;AAAA,sBACGC,UAAU,CAACC,GAAX,CAAgBC,MAAD,IAAY;AAC1B,kCACE;AAAA,wCACE;AAAA,4BAAKC,cAAc,CAACD,MAAM,CAACE,OAAR;AAAnB;AAAA;AAAA;AAAA;AAAA,wBADF,eAEE;AAAA,4BAAKF,MAAM,CAACG;AAAZ;AAAA;AAAA;AAAA;AAAA,wBAFF;AAAA,iBAASH,MAAM,CAACE,OAAhB;AAAA;AAAA;AAAA;AAAA,sBADF;AAMD,aAPA;AADH;AAAA;AAAA;AAAA;AAAA,kBAPF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAsBE;AAAA,gCACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADF,eAEE;AACE,UAAA,QAAQ,EAAE,MAAOE,CAAP,IAAa;AACrBA,YAAAA,CAAC,CAACC,cAAF;AACAD,YAAAA,CAAC,CAACE,eAAF,GAFqB,CAIrB;AACA;;AACAT,YAAAA,KAAK,CAACU,kBAAN,GANqB,CAQrB;;AACA,kBAAMC,KAAK,GAAGC,SAAS,CAACV,GAAV,CAAeW,QAAD,IAAc;AACxC,kBAAIC,UAAU,GAAG;AACfC,gBAAAA,UAAU,EAAEF,QAAQ,CAACE,UADN;AAEf;AACAC,gBAAAA,IAAI,EAAE;AAHS,eAAjB;AAKAH,cAAAA,QAAQ,CAACF,KAAT,CAAeM,OAAf,CAAwBD,IAAD,IAAU;AAC/B,sBAAME,IAAI,GAAGC,QAAQ,CAACC,cAAT,CACXP,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IADtB,CAAb;;AAIA,oBAAIH,IAAI,CAACI,OAAT,EAAkB;AAChBR,kBAAAA,UAAU,CAACE,IAAX,GAAkBA,IAAI,CAACK,IAAvB;AACA;AACD;AACF,eATD;AAUA,qBAAOP,UAAP;AACD,aAjBa,CAAd,CATqB,CA4BrB;;AACA,gBAAI;AACF;AACA,oBAAMS,UAAU,GAAG,MAAMC,WAAW,CAACC,eAAZ,CAA4BpB,OAA5B,CAAzB,CAFE,CAGF;;AACA,kBAAIkB,UAAU,KAAKG,MAAM,CAACC,SAAP,CAAiBC,WAApC,EAAiD;AAC/C;AACA,sBAAMJ,WAAW,CAACK,UAAZ,CAAuBxB,OAAvB,CAAN;AACD,eAPC,CAQF;;;AACA,kBAAI;AACF,sBAAMyB,OAAO,CAACC,GAAR,CACJpB,KAAK,CAACT,GAAN,CAAU,MAAOc,IAAP,IAAgB;AACxB;AACA;AACA,wBAAMH,QAAQ,GAAG,MAAMmB,UAAU,CAACC,GAAX,CAAejB,IAAI,CAACD,UAApB,CAAvB,CAHwB,CAIxB;;AACA,sBAAIF,QAAQ,CAACqB,KAAT,KAAmB,CAAvB,EAA0B;AACxB;AACA,2BAAOF,UAAU,CAAChB,IAAX,CAAgBA,IAAI,CAACD,UAArB,EAAiCC,IAAI,CAACA,IAAtC,CAAP;AACD,mBARuB,CASxB;;;AACA;AACD,iBAXD,CADI,CAAN;;AAcA,oBAAI;AACF;AACA;AACA,wBAAMc,OAAO,CAACC,GAAR,CACJpB,KAAK,CAACT,GAAN,CAAU,MAAOc,IAAP,IAAgB;AACxB;AACA,0BAAMH,QAAQ,GAAG,MAAMmB,UAAU,CAACC,GAAX,CACrBjB,IAAI,CAACD,UADgB,CAAvB,CAFwB,CAMxB;;AACA,wBAAIF,QAAQ,CAACqB,KAAT,KAAmB,CAAvB,EAA0B;AACxB,6BAAOF,UAAU,CAACG,OAAX,CAAmBnB,IAAI,CAACD,UAAxB,CAAP;AACD;AACF,mBAVD,CADI,CAAN,CAHE,CAgBF;;AACAqB,kBAAAA,WAAW,CAAC,IAAD,CAAX,CAjBE,CAkBF;;AACAC,kBAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACD,iBApBD,CAoBE,OAAOC,GAAP,EAAY;AACZF,kBAAAA,OAAO,CAACG,KAAR,CAAc,yBAAd,EAAyCD,GAAzC;AACD;AACF,eAtCD,CAsCE,OAAOA,GAAP,EAAY;AACZF,gBAAAA,OAAO,CAACG,KAAR,CAAc,gBAAd,EAAgCD,GAAhC;AACD;AACF,aAlDD,CAkDE,OAAOA,GAAP,EAAY;AACZF,cAAAA,OAAO,CAACG,KAAR,CAAc,2BAAd;AACD,aApDD,SAoDU;AACR;AACAC,cAAAA,WAAW,CAAC,KAAD,CAAX;AACD;AACF,WAtFH;AAAA,qBAwFG7B,SAAS,CAACV,GAAV,CAAc,CAACW,QAAD,EAAW6B,KAAX,kBACb;AAA+B,YAAA,SAAS,EAAC,MAAzC;AAAA,oCACE;AAAA,wBAAK7B,QAAQ,CAAC8B;AAAd;AAAA;AAAA;AAAA;AAAA,oBADF,eAEE;AAAA,wBACG9B,QAAQ,CAACF,KAAT,CAAeT,GAAf,CAAoBc,IAAD,iBAClB;AAAA,wCACE;AACE,kBAAA,IAAI,EAAC,OADP;AAEE,kBAAA,EAAE,EAAEH,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IAFvC;AAGE,kBAAA,IAAI,EAAER,QAAQ,CAACE,UAHjB;AAIE,kBAAA,KAAK,EAAEC,IAAI,CAACK,IAJd,CAKE;AALF;AAME,kBAAA,cAAc,EAAEL,IAAI,CAACK,IAAL,KAAc;AANhC;AAAA;AAAA;AAAA;AAAA,wBADF,eASE;AAAO,kBAAA,OAAO,EAAER,QAAQ,CAACE,UAAT,GAAsB,GAAtB,GAA4BC,IAAI,CAACK,IAAjD;AAAA,4BACGL,IAAI,CAAC4B;AADR;AAAA;AAAA;AAAA;AAAA,wBATF;AAAA,iBAAU5B,IAAI,CAACK,IAAf;AAAA;AAAA;AAAA;AAAA,sBADD;AADH;AAAA;AAAA;AAAA;AAAA,oBAFF;AAAA,aAAUR,QAAQ,CAACE,UAAnB;AAAA;AAAA;AAAA;AAAA,kBADD,CAxFH,eA8GE;AAAQ,YAAA,QAAQ,EAAE8B,QAAQ,IAAIC,QAA9B;AAAwC,YAAA,IAAI,EAAC,QAA7C;AAAA,sBACGD,QAAQ,GACL,WADK,GAELC,QAAQ,GACR,mBADQ,GAER;AALN;AAAA;AAAA;AAAA;AAAA,kBA9GF,eAqHE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBArHF;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFF;AAAA;AAAA;AAAA;AAAA;AAAA,cAtBF;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AA0JH;KA3JuB/C,M","sourcesContent":["\nimport React from \"react\";\n\nexport default function Member(props) {\n    return (\n        <div className=\"member-page\">\n          <h1>🍪Indian Cinema DAO Member Page</h1>\n          <p>Congratulations on being a member</p>\n          <div>\n            <div>\n              <h2>Member List</h2>\n              <table className=\"card\">\n                <thead>\n                  <tr>\n                    <th>Address</th>\n                    <th>Token Amount</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {memberList.map((member) => {\n                    return (\n                      <tr key={member.address}>\n                        <td>{shortenAddress(member.address)}</td>\n                        <td>{member.tokenAmount}</td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </div>\n            <div>\n              <h2>Active Proposals</h2>\n              <form\n                onSubmit={async (e) => {\n                  e.preventDefault();\n                  e.stopPropagation();\n  \n                  //before we do async things, we want to disable the button to prevent double clicks\n                  //setIsVoting(true);\n                  props.doubleClickHandler();\n  \n                  // lets get the votes from the form for the values\n                  const votes = proposals.map((proposal) => {\n                    let voteResult = {\n                      proposalId: proposal.proposalId,\n                      //abstain by default\n                      vote: 2,\n                    };\n                    proposal.votes.forEach((vote) => {\n                      const elem = document.getElementById(\n                        proposal.proposalId + \"-\" + vote.type\n                      );\n  \n                      if (elem.checked) {\n                        voteResult.vote = vote.type;\n                        return;\n                      }\n                    });\n                    return voteResult;\n                  });\n  \n                  // first we need to make sure the user delegates their token to vote\n                  try {\n                    //we'll check if the wallet still needs to delegate their tokens before they can vote\n                    const delegation = await tokenModule.getDelegationOf(address);\n                    // if the delegation is the 0x0 address that means they have not delegated their governance tokens yet\n                    if (delegation === ethers.constants.AddressZero) {\n                      //if they haven't delegated their tokens yet, we'll have them delegate them before voting\n                      await tokenModule.delegateTo(address);\n                    }\n                    // then we need to vote on the proposals\n                    try {\n                      await Promise.all(\n                        votes.map(async (vote) => {\n                          // before voting we first need to check whether the proposal is open for voting\n                          // we first need to get the latest state of the proposal\n                          const proposal = await voteModule.get(vote.proposalId);\n                          // then we check if the proposal is open for voting (state === 1 means it is open)\n                          if (proposal.state === 1) {\n                            // if it is open for voting, we'll vote on it\n                            return voteModule.vote(vote.proposalId, vote.vote);\n                          }\n                          // if the proposal is not open for voting we just return nothing, letting us continue\n                          return;\n                        })\n                      );\n                      try {\n                        // if any of the propsals are ready to be executed we'll need to execute them\n                        // a proposal is ready to be executed if it is in state 4\n                        await Promise.all(\n                          votes.map(async (vote) => {\n                            // we'll first get the latest state of the proposal again, since we may have just voted before\n                            const proposal = await voteModule.get(\n                              vote.proposalId\n                            );\n  \n                            //if the state is in state 4 (meaning that it is ready to be executed), we'll execute the proposal\n                            if (proposal.state === 4) {\n                              return voteModule.execute(vote.proposalId);\n                            }\n                          })\n                        );\n                        // if we get here that means we successfully voted, so let's set the \"hasVoted\" state to true\n                        setHasVoted(true);\n                        // and log out a success message\n                        console.log(\"successfully voted\");\n                      } catch (err) {\n                        console.error(\"failed to execute votes\", err);\n                      }\n                    } catch (err) {\n                      console.error(\"failed to vote\", err);\n                    }\n                  } catch (err) {\n                    console.error(\"failed to delegate tokens\");\n                  } finally {\n                    // in *either* case we need to set the isVoting state to false to enable the button again\n                    setIsVoting(false);\n                  }\n                }}\n              >\n                {proposals.map((proposal, index) => (\n                  <div key={proposal.proposalId} className=\"card\">\n                    <h5>{proposal.description}</h5>\n                    <div>\n                      {proposal.votes.map((vote) => (\n                        <div key={vote.type}>\n                          <input\n                            type=\"radio\"\n                            id={proposal.proposalId + \"-\" + vote.type}\n                            name={proposal.proposalId}\n                            value={vote.type}\n                            //default the \"abstain\" vote to chedked\n                            defaultChecked={vote.type === 2}\n                          />\n                          <label htmlFor={proposal.proposalId + \"-\" + vote.type}>\n                            {vote.label}\n                          </label>\n                        </div>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n                <button disabled={isVoting || hasVoted} type=\"submit\">\n                  {isVoting\n                    ? \"Voting...\"\n                    : hasVoted\n                    ? \"You Already Voted\"\n                    : \"Submit Votes\"}\n                </button>\n                <small>\n                  This will trigger multiple transactions that you will need to\n                  sign.\n                </small>\n              </form>\n            </div>\n          </div>\n        </div>\n      );\n}"]},"metadata":{},"sourceType":"module"}