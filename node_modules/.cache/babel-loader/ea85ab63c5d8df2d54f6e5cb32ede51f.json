{"ast":null,"code":"var _jsxFileName = \"/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState } from \"react\"; //import thirdweb\n\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\nimport { ethers } from \"ethers\"; // We instantiate the SDK on Rinkeyby\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst sdk = new ThirdwebSDK(\"rinkeby\"); // We can grab a reference to our ERC-1155 contract.\n\nconst bundleDropModule = sdk.getBundleDropModule(\"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\"); // We can grab a reference to our ERC-20 token contract.\n\nconst tokeModule = sdk.getTokenModule(\"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\");\n\nconst App = () => {\n  _s();\n\n  // Use connectWallet hook thirdweb gives us\n  const {\n    connectWallet,\n    address,\n    error,\n    provider\n  } = useWeb3();\n  console.log(\"👋  Address: \", address); // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n\n  const signer = provider ? provider.getSigner() : undefined; // State variable for us to know if user has our NFT.\n\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false); // isClaiming lets us easily keep a loading state while the NFT is minting\n\n  const [isClaiming, setIsClaiming] = useState(false); // Holds the amount of token each member has in state.\n\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({}); // The array holding all of our members addresses.\n\n  const [memberAddresses, setMemberAddresses] = useState([]); // A fancy function to shorten someones wallet address, no need to show the whole \n  // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact\n    // with our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n  useEffect(() => {\n    // If they don't have a connected wallet, exit!\n    if (!address) {\n      return;\n    } // Check if the user has the NFT by using bundleDropModule.balanceOf\n\n\n    return bundleDropModule.balanceOf(address, \"0\").then(balance => {\n      // If balance is greater than 0, they have our NFT!\n      if (balance.gt(0)) {\n        setHasClaimedNFT(true);\n        console.log(\"🌟 this user has a membership NFT!\");\n      } else {\n        setHasClaimedNFT(false);\n        console.log(\"😭 this user doesn't have a membership NFT.\");\n      }\n    }).catch(error => {\n      setHasClaimedNFT(false);\n      console.lerror(\"failed to nft balance\", error);\n    });\n  }, [address]); // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (!address) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"landing\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \" Welcome to IndianCinemaDAO \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => connectWallet(\"injected\"),\n        className: \"btn-hero\",\n        children: \"Connect your wallet\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (hasClaimedNFT) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"member-page\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"\\uD83C\\uDF6A Indian Cinema DAO Member Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" Congratulations on being a member \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this);\n  }\n\n  const mintNFT = () => {\n    setIsClaiming(true); // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's walelt\n\n    bundleDropModule.claim(\"0\", 1).catch(err => {\n      console.error(\"failed to claim\", err);\n      setIsClaiming(false);\n    }).finally(() => {\n      // Stop loading state.\n      setIsClaiming(false); // Set claim state.\n\n      setHasClaimedNFT(true); // Show user their fancy new NFT!\n\n      console.log(`🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`);\n    });\n  }; // Render mint nft screen.\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"mint-nft\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Mint your free \\uD83C\\uDF6AIndianCinema Membership NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      disabled: isClaiming,\n      onClick: () => mintNFT(),\n      children: isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this); // This is the case where we have the user's address\n  // which means they've connected their wallet to your site!\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"landing\",\n    children: /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"\\uD83D\\uDC40 wallet connected \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(App, \"LG3omWvpIPTrtTw+wIdUV1iZHfA=\", false, function () {\n  return [useWeb3];\n});\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/saibalaji/Documents/projects/web3/buildspace-dao-starter-main/src/App.jsx"],"names":["useEffect","useMemo","useState","useWeb3","ThirdwebSDK","ethers","sdk","bundleDropModule","getBundleDropModule","tokeModule","getTokenModule","App","connectWallet","address","error","provider","console","log","signer","getSigner","undefined","hasClaimedNFT","setHasClaimedNFT","isClaiming","setIsClaiming","memberTokenAmounts","setMemberTokenAmounts","memberAddresses","setMemberAddresses","setProviderOrSigner","balanceOf","then","balance","gt","catch","lerror","mintNFT","claim","err","finally"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState } from \"react\";\n\n//import thirdweb\nimport { useWeb3 } from \"@3rdweb/hooks\";\nimport { ThirdwebSDK } from \"@3rdweb/sdk\";\n\nimport { ethers } from \"ethers\";\n\n// We instantiate the SDK on Rinkeyby\nconst sdk = new ThirdwebSDK(\"rinkeby\");\n\n// We can grab a reference to our ERC-1155 contract.\nconst bundleDropModule = sdk.getBundleDropModule(\n  \"0x3f1e9Cdd485191b8658aD311e49f77Bc021f0749\"\n);\n\n// We can grab a reference to our ERC-20 token contract.\nconst tokeModule = sdk.getTokenModule(\n  \"0xA21123e4a201D1227E46536F4A1CA63D89fdd6AA\"\n);\n\nconst App = () => {\n  // Use connectWallet hook thirdweb gives us\n  const { connectWallet, address, error, provider } = useWeb3();\n  console.log(\"👋  Address: \", address);\n\n  // The signer is required to sign transactions on the blockchain.\n  // Without it we can only read data, not write.\n  const signer = provider ? provider.getSigner() : undefined;\n\n  // State variable for us to know if user has our NFT.\n  const [hasClaimedNFT, setHasClaimedNFT] = useState(false);\n\n  // isClaiming lets us easily keep a loading state while the NFT is minting\n  const [isClaiming, setIsClaiming] = useState(false);\n\n  // Holds the amount of token each member has in state.\n  const [memberTokenAmounts, setMemberTokenAmounts] = useState({});\n  \n  // The array holding all of our members addresses.\n  const [memberAddresses, setMemberAddresses] = useState([]);\n\n  // A fancy function to shorten someones wallet address, no need to show the whole \n\n  // Another useEffect!\n\n  useEffect(() => {\n    // We pass the signer to the sdk, which enables us to interact\n    // with our deployed contract!\n    sdk.setProviderOrSigner(signer);\n  }, [signer]);\n\n  useEffect(() => {\n    // If they don't have a connected wallet, exit!\n    if (!address) {\n      return;\n    }\n\n    // Check if the user has the NFT by using bundleDropModule.balanceOf\n    return bundleDropModule\n      .balanceOf(address, \"0\")\n      .then((balance) => {\n        // If balance is greater than 0, they have our NFT!\n        if (balance.gt(0)) {\n          setHasClaimedNFT(true);\n          console.log(\"🌟 this user has a membership NFT!\");\n        } else {\n          setHasClaimedNFT(false);\n          console.log(\"😭 this user doesn't have a membership NFT.\");\n        }\n      })\n      .catch((error) => {\n        setHasClaimedNFT(false);\n        console.lerror(\"failed to nft balance\", error);\n      });\n  }, [address]);\n\n  // This is the case where the user hasn't connected their wallet\n  // to your web app. Let them call connectWallet.\n\n  if (!address) {\n    return (\n      <div className=\"landing\">\n        <h1> Welcome to IndianCinemaDAO </h1>\n        <button onClick={() => connectWallet(\"injected\")} className=\"btn-hero\">\n          Connect your wallet\n        </button>\n      </div>\n    );\n  }\n\n  if (hasClaimedNFT) {\n    return (\n      <div className=\"member-page\">\n        <h1>🍪 Indian Cinema DAO Member Page</h1>\n        <p> Congratulations on being a member </p>\n      </div>\n    );\n  }\n\n  const mintNFT = () => {\n    setIsClaiming(true);\n    // Call bundleDropModule.claim(\"0\", 1) to mint nft to user's walelt\n    bundleDropModule\n      .claim(\"0\", 1)\n      .catch((err) => {\n        console.error(\"failed to claim\", err);\n        setIsClaiming(false);\n      })\n      .finally(() => {\n        // Stop loading state.\n        setIsClaiming(false);\n        // Set claim state.\n        setHasClaimedNFT(true);\n        // Show user their fancy new NFT!\n        console.log(\n          `🌊 Successfully Minted! Check it out on OpenSea: https://testnets.opensea.io/assets/${bundleDropModule.address}/0`\n        );\n      });\n  };\n\n  // Render mint nft screen.\n\n  return (\n    <div className=\"mint-nft\">\n      <h1>Mint your free 🍪IndianCinema Membership NFT</h1>\n      <button disabled={isClaiming} onClick={() => mintNFT()}>\n        {isClaiming ? \"Minting...\" : \"Mint your nft (FREE)\"}\n      </button>\n    </div>\n  );\n\n  // This is the case where we have the user's address\n  // which means they've connected their wallet to your site!\n  return (\n    <div className=\"landing\">\n      <h1>👀 wallet connected </h1>\n    </div>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}